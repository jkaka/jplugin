#set($packagePath = $!context.packagePath)
#set($entity = $!context.entity)
#set($columns = $!context.columns)
#set($beanName = $!context.beanName)
#set($tableName = $!context.tableName)
#set($colKey = $!context.colKey)
#set($type = $!context.type)
package $!packagePath;
#set($rootPackage = $!context.rootPackage)

import com.kaka.common.utils.BaseResultUtil;
import $!{rootPackage}.#if(!$!{context.codeStatus})client.#{end}dto.$!{entity}DTO;
#if(!$!{context.codeStatus})
import $!{rootPackage}.client.service.*;
import $!{rootPackage}.biz.service.*;
#else
import $!{rootPackage}.service.*;
#{end}

import com.kaka.common.base.BaseResult;
import java.util.List;
import com.alibaba.dubbo.config.annotation.Service;
import org.springframework.beans.factory.annotation.Autowired;

import com.kaka.common.utils.LogUtil;
import com.kaka.common.constants.Constants;
import com.kaka.common.enums.ResultCode;

/**
* @Description： $!context.desc 对外服务类
* @PackageName: $!packagePath
* @ClassName: $!{entity}WriteImpl$!{type}
* @project： $!context.sysCode
* @author: jsk
* @dep: 99技术部
* @company: 99技术有限公司
* @address: 国际大路,中原谷
* @date： $!context.date
*/

@Service(version = "1.0.0", timeout = 10000)
public class $!{entity}$!{type} implements $!{entity}WriteService{
    private final LogUtil logger = new LogUtil(Constants.OPEN_SERVICE);

    @Autowired
    private $!{entity}Service $!{beanName}Service;

    /**
    * 新增一条记录
    * @param $!{beanName}DTO
    * @return
    */
    @Override
    public BaseResult<Integer> insert($!{entity}DTO $!{beanName}DTO) {
        logger.info("新增数据$!{beanName}DTO:"+$!{beanName}DTO);
        BaseResult<Integer> result = new BaseResult<>();
        try{
            int insert = $!{beanName}Service.insert($!{beanName}DTO);
            BaseResultUtil.wrapSuccess(result, insert);
        } catch (Throwable e){
            logger.error("新增记录失败，$!{beanName}DTO:"+$!{beanName}DTO,e);
            result.setMessage(e.getMessage());
        }
        return result;
    }

    /**
    * 修改一条记录
    * @param $!{beanName}DTO
    * @return
    */
    @Override
    public BaseResult<Integer> update($!{entity}DTO $!{beanName}DTO) {
        logger.info("传入参数如下：$!{beanName}DTO:"+$!{beanName}DTO);
        BaseResult<Integer> result = new BaseResult<>();
        try{
            int update = $!{beanName}Service.update($!{beanName}DTO);
            BaseResultUtil.wrapSuccess(result, update);
        } catch (Throwable e){
            logger.error("更新记录失败，$!{beanName}DTO:"+$!{beanName}DTO,e);
            result.setMessage(e.getMessage());
        }
        return result;
    }

    #set($isStatus = "false")
    #set($isLastUser = "false")
    #foreach($column in $columns)
        #if($!column.attrName=="status")
            #set($isStatus ="true")
        #elseif($!column.attrName=="lastUser")
            #set($isLastUser ="true")
        #end
    #end

    #if($!isStatus=="true")
    /**
    * 启用记录
    * @param $!{colKey.attrName}
    * @return
    */
    @Override
    public BaseResult<Integer> enable($!{colKey.javaType} $!{colKey.attrName} #if($!{isLastUser}=="true"),String userId#end) {
        logger.info("传入参数如下：$!{colKey.attrName}:" + $!{colKey.attrName});
        BaseResult<Integer> result = new BaseResult<>();
        try{
            int update = $!{beanName}Service.enable($!{colKey.attrName} #if($!{isLastUser}=="true"), userId#end);
            BaseResultUtil.wrapSuccess(result, update);
        } catch (Throwable e){
            logger.error("启用记录失败，$!{colKey.attrName}:" + $!{colKey.attrName}, e);
            result.setMessage(e.getMessage());
        }
        return result;
    }

    /**
    * 禁用记录
    * @param $!{colKey.attrName}
    * @return
    */
    @Override
    public BaseResult<Integer> disable($!{colKey.javaType} $!{colKey.attrName}#if($!{isLastUser}=="true"), String userId#end) {
        logger.info("传入参数如下：$!{colKey.attrName}:"+$!{colKey.attrName});
        BaseResult<Integer> result = new BaseResult<>();
        try{
            int update = $!{beanName}Service.disable($!{colKey.attrName}#if($!{isLastUser}=="true"), userId#end);
            BaseResultUtil.wrapSuccess(result, update);
        } catch (Throwable e){
            logger.error("禁用记录失败，$!{colKey.attrName}:" + $!{colKey.attrName}, e);
            result.setMessage(e.getMessage());
        }
        return result;
    }
#end

    /**
    * 批量新增记录
    * @param list
    * @return
    */
    @Override
    public BaseResult<Boolean> insertBatch(List<$!{entity}DTO> list) {
        logger.info("传入参数如下：list:"+list);
        BaseResult<Boolean> baseResult = new BaseResult<>();
        try{
            $!{beanName}Service.insertBatch(list);
            BaseResultUtil.wrapSuccess(baseResult, Boolean.TRUE, "批量新增成功！");
        } catch (Throwable e){
            logger.error("批量新增记录失败，list:"+list,e);
            baseResult.setMessage(e.getMessage());
        }
        return baseResult;
    }
    /**
    * 批量修改记录
    * @param list
    * @return
    */
    @Override
    public BaseResult<Boolean> updateBatch(List<$!{entity}DTO> list) {
        logger.info("传入参数如下：list:"+list);
        BaseResult<Boolean> result = new BaseResult<>();
        try{
            $!{beanName}Service.updateBatch(list);
            BaseResultUtil.wrapSuccess(result, Boolean.TRUE, "批量更新成功！");
        } catch (Throwable e){
            logger.error("批量更新记录失败，car:"+list,e);
            result.setMessage(e.getMessage());
        }
        return result;
    }

    /**
    * 批量新增、修改记录
    * @param insertList
    * @param updateList
    * @return
    */
    @Override
    public BaseResult<Boolean> insertAndUpdateBatch(List<$!{entity}DTO> insertList, List<$!{entity}DTO> updateList) {
        logger.info("传入参数如下：insertList:" + insertList);
        logger.info("传入参数如下：updateList:" + updateList);
        BaseResult<Boolean> baseResult = new BaseResult<>();
        try{
            $!{beanName}Service.insertAndUpdate(insertList,updateList);
            BaseResultUtil.wrapSuccess(baseResult, Boolean.TRUE, "批量新增、修改记录成功！");
        } catch (Throwable e){
            logger.error("批量新增/更新记录失败，insertList:" + insertList + ",updateList" + updateList,e);
            baseResult.setMessage(e.getMessage());
        }
        return baseResult;
    }
}