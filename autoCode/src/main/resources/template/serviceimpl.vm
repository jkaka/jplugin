#set($packagePath = $!context.packagePath)
#set($entity = $!context.entity)
#set($beanName = $!context.beanName)
#set($columns = $!context.columns)
#set($tableName = $!context.tableName)
#set($colKey = $!context.colKey)
#set($type = $!context.type)
#set($rootPackage = $!context.rootPackage)
package $!packagePath;

import com.alibaba.fastjson.JSONObject;
import com.baomidou.mybatisplus.core.conditions.query.QueryWrapper;
import com.baomidou.mybatisplus.core.metadata.IPage;
import com.baomidou.mybatisplus.extension.plugins.pagination.Page;
import com.kaka.common.base.PageResult;
import com.kaka.common.constants.Constants;
import com.kaka.common.utils.LogUtil;
import org.apache.commons.lang3.StringUtils;
import $!{rootPackage}.#if(!$!{context.codeStatus})biz.#{end}dataobject.*;
#if(!$!{context.codeStatus})import $!{rootPackage}.biz.service.$!{entity}Service;#{end}
import $!{rootPackage}.#if(!$!{context.codeStatus})client.#{end}dto.*;
import $!{rootPackage}.#if(!$!{context.codeStatus})biz.#{end}mapper.*;
import org.apache.commons.collections.CollectionUtils;
import com.baomidou.mybatisplus.extension.service.impl.ServiceImpl;
import org.springframework.stereotype.Service;

import java.util.*;

#set($isStatus = "false")
#foreach($column in $columns)
    #if($!column.attrName=="status")
        #set($isStatus ="true")
    #end
#end
#set($isLastUser = "false")
#foreach($column in $columns)
    #if($!column.attrName=="lastUser")
        #set($isLastUser ="true")
    #end
#end

#if($!isStatus=="true")
import com.kaka.common.enums.StatusEnum;
#end

import org.springframework.transaction.annotation.Isolation;
import org.springframework.transaction.annotation.Propagation;
import org.springframework.transaction.annotation.Transactional;

/**
* @Description： $!context.desc
* @PackageName: $!packagePath
* @ClassName: $!{entity}${type}
* @project： $!context.sysCode
* @author: jsk
* @dep: 99技术部
* @company: 99技术有限公司
* @address: 国际大路,中原谷
* @date： $!context.date
*/
@Service
public class $!{entity}$!{type} extends ServiceImpl<$!{entity}Mapper, $!{entity}DO> implements $!{entity}Service {
    private  final LogUtil logger = new LogUtil(this.getClass());

    #set($isStatus = "false")
    #set($isLastUser = "false")
    #set($isCreateUser = "false")
    #foreach($column in $columns)
        #if($!column.attrName=="status")
            #set($isStatus ="true")
        #elseif($!column.attrName=="lastUser")
            #set($isLastUser ="true")
        #elseif($!column.attrName=="createUser")
            #set($isCreateUser ="true")
        #end
    #end

    /**
     * 根据主键查询信息
     * @param $!{colKey.attrName}
     * @return
     */
    @Override
    public $!{entity}DTO selectOne($!{colKey.javaType} $!{colKey.attrName}) {
        if(Objects.isNull($!{colKey.attrName})){
            logger.error("传入主键为空！");
            return null;
        }
        $!{entity}DO $!{beanName}DO = baseMapper.selectById($!{colKey.attrName});
        if(Objects.isNull($!{beanName}DO)){
            logger.error("查询结果为空！$!{colKey.attrName}="+$!{colKey.attrName});
            return null;
        }
        $!{entity}DTO $!{beanName}DTO = new $!{entity}DTO();
        #foreach($column in $columns)$!{beanName}DTO.set$!{column.methodName}($!{beanName}DO.get$!{column.methodName}());
        #end

        return $!{beanName}DTO;
    }

    /**
     * 根据传入参数查询列表 支持分页查询
     * @param param
     * @return
     */
    @Override
    public PageResult<List<$!{entity}DTO>> selectPage(Map<String, Object> param) {
        if(Objects.isNull(param)){
            param = new HashMap<>(8);
        }
        long currentPage = param.get(Constants.PAGE_INDEX) == null ? 0 : new Integer(param.get(Constants.PAGE_INDEX).toString());
        long pageSize = param.get(Constants.PAGE_SIZE) == null ? 500 : new Integer(param.get(Constants.PAGE_SIZE).toString());
        pageSize = pageSize > 5000 ? 5000 : pageSize;

        Page page = new Page(currentPage, pageSize);
        $!{entity}DO $!{beanName}Param = JSONObject.parseObject(JSONObject.toJSONString(param), $!{entity}DO.class);
        QueryWrapper<$!{entity}DO> queryWrapper = new QueryWrapper<>($!{beanName}Param);
        IPage iPage = baseMapper.selectPage(page, queryWrapper);

        List<$!{entity}DO> dataList = iPage.getRecords();
        List<$!{entity}DTO> valueList = new ArrayList<>();
        if(CollectionUtils.isEmpty(dataList)){
            logger.error("查询结果为空！param="+param);
            return null;
        }
        for(int i=0;i<dataList.size();i++){
            $!{entity}DO $!{beanName}DO = dataList.get(i);
            $!{entity}DTO $!{beanName}DTO = new $!{entity}DTO();
            #foreach($column in $columns)$!{beanName}DTO.set$!{column.methodName}($!{beanName}DO.get$!{column.methodName}());
            #end

            valueList.add($!{beanName}DTO);
        }
        return new PageResult<>(new Long(iPage.getCurrent()).intValue(),
                new Long(iPage.getSize()).intValue(),
                new Long(iPage.getTotal()).intValue(),
                valueList);
    }

    /**
     * 根据条件查询记录总条数
     * @param param
     * @return
     */
    @Override
    public Integer countList(Map<String, Object> param) {
        $!{entity}DO $!{beanName}Param = JSONObject.parseObject(JSONObject.toJSONString(param), $!{entity}DO.class);
        QueryWrapper<$!{entity}DO> queryWrapper = new QueryWrapper<>($!{beanName}Param);
        return baseMapper.selectCount(queryWrapper);
    }

    /**
     * 新增一条记录
     * @param $!{beanName}DTO
     * @return
     */
    @Override
    public int insert($!{entity}DTO $!{beanName}DTO) {
        if(Objects.isNull($!{beanName}DTO)){
             logger.error("查询对象为空！");
             return -1;
        }
        $!{entity}DO $!{beanName}DO = new $!{entity}DO();
        #foreach($column in $columns)
            #if(("gmt_modified"==$!{column.colName} && "java.lang.Long"==$!{column.javaType})
            ||("gmt_create"==$!{column.colName} && "java.lang.Long"==$!{column.javaType}))
                $!{beanName}DO.set$!{column.methodName}(System.currentTimeMillis());
            #elseif(("gmt_modified"==$!{column.colName} && "java.util.Date"==$!{column.javaType})
            ||("gmt_create"==$!{column.colName} && "java.util.Date"==$!{column.javaType}))
                $!{beanName}DO.set$!{column.methodName}(new Date());
            #elseif("create_user"==$!{column.colName} || "last_user"==$!{column.colName})
                $!{beanName}DO.set$!{column.methodName}(StringUtils.isEmpty($!{beanName}DO.get$!{column.methodName}()) ? "system" : $!{beanName}DO.get$!{column.methodName}());
            #elseif("status"==$!{column.colName})
                $!{beanName}DO.set$!{column.methodName}(StatusEnum.STATUS_Y.getCode());
            #else$!{beanName}DO.set$!{column.methodName}($!{beanName}DTO.get$!{column.methodName}());
            #end
        #end

        int insert= baseMapper.insert($!{beanName}DO);
        if(insert > 0){
            $!{beanName}DTO.set$!{colKey.methodName}($!{beanName}DO.get$!{colKey.methodName}());
        }
        return insert;
    }

    /**
     * 修改一条记录
     * @param $!{beanName}DTO
     * @return
     */
    @Override
    public int update($!{entity}DTO $!{beanName}DTO) {
        if(Objects.isNull($!{beanName}DTO)){
             logger.error("查询对象为空！");
             return -1;
        }
        $!{entity}DO $!{beanName}DO = new $!{entity}DO();
        #foreach($column in $columns)
            #if("gmt_create"==$!{column.colName} || "create_user"==$!{column.colName} || "status"==$!{column.colName})
            #elseif("gmt_modified"==$!{column.colName} && "java.lang.Long"==$!{column.javaType})
                $!{beanName}DO.set$!{column.methodName}(System.currentTimeMillis());
            #elseif("gmt_modified"==$!{column.colName} && "java.util.Date"==$!{column.javaType})
                $!{beanName}DO.set$!{column.methodName}(new Date());
            #elseif("last_user"==$!{column.colName})
                $!{beanName}DO.set$!{column.methodName}(StringUtils.isEmpty($!{beanName}DO.get$!{column.methodName}()) ? "system" : $!{beanName}DO.get$!{column.methodName}());
            #else$!{beanName}DO.set$!{column.methodName}($!{beanName}DTO.get$!{column.methodName}());
            #end
        #end

        return baseMapper.updateById($!{beanName}DO);
    }

    /**
     * 删除一条记录
     * @param $!{colKey.attrName}
     * @return
     */
    @Override
    public int delete($!{colKey.javaType} $!{colKey.attrName}) {
        return baseMapper.deleteById($!{colKey.attrName});
    }

#if($!isStatus=="true")
   /**
    * 禁用数据
    * @param $!{colKey.attrName}
    #if($!{isLastUser}=="true")
        * @param userId 操作人
    #end
    * @return
    */
    @Override
    public int disable($!{colKey.javaType} $!{colKey.attrName}#if($!{isLastUser}=="true"),String userId #end){
        $!{entity}DO $!{beanName}DO = new $!{entity}DO();
        $!{beanName}DO.set$!{colKey.methodName}($!{colKey.attrName});
        #if($!{isLastUser}=="true")$!{beanName}DO.setLastUser(userId);#end

        $!{beanName}DO.setStatus(StatusEnum.STATUS_N.getCode());
        return baseMapper.updateStatus($!{beanName}DO);
    }

    /**
     * 启用数据
     * @param $!{colKey.attrName}
    #if($!{isLastUser}=="true")
     * @param userId 操作人
     #end
     * @return
     */
    @Override
    public int enable($!{colKey.javaType} $!{colKey.attrName}#if($!{isLastUser}=="true"),String userId #end){
        $!{entity}DO $!{beanName}DO = new $!{entity}DO();
        $!{beanName}DO.set$!{colKey.methodName}($!{colKey.attrName});
        #if($!{isLastUser}=="true")$!{beanName}DO.setLastUser(userId);#end

        $!{beanName}DO.setStatus(StatusEnum.STATUS_Y.getCode());
        return baseMapper.updateStatus($!{beanName}DO);
    }
#end

    /**
    * 批量新增记录
    *
    * @param list
    * @return
    */
    @Override
    public void insertBatch(List<$!{entity}DTO> list)throws Exception{
        if (CollectionUtils.isEmpty(list)) {
            logger.error("传对象为空,本次批量新增操作无效!");
            return;
        }
        List<$!{entity}DO> $!{beanName}List = new ArrayList<>();
        for ($!{entity}DTO $!{beanName}DTO : list) {
            $!{entity}DO $!{beanName}DO = new $!{entity}DO();
            #foreach($column in $columns)
                #if(("gmt_modified"==$!{column.colName} && "java.lang.Long"==$!{column.javaType})
                ||("gmt_create"==$!{column.colName} && "java.lang.Long"==$!{column.javaType}))
                    $!{beanName}DO.set$!{column.methodName}(System.currentTimeMillis());
                #elseif(("gmt_modified"==$!{column.colName} && "java.util.Date"==$!{column.javaType})
                ||("gmt_create"==$!{column.colName} && "java.util.Date"==$!{column.javaType}))
                    $!{beanName}DO.set$!{column.methodName}(new Date());
                #elseif("create_user"==$!{column.colName} || "last_user"==$!{column.colName})
                    $!{beanName}DO.set$!{column.methodName}(StringUtils.isEmpty($!{beanName}DO.get$!{column.methodName}()) ? "system" : $!{beanName}DO.get$!{column.methodName}());
                #elseif("status"==$!{column.colName})
                    $!{beanName}DO.set$!{column.methodName}(StatusEnum.STATUS_Y.getCode());
                #else$!{beanName}DO.set$!{column.methodName}($!{beanName}DTO.get$!{column.methodName}());
                #end
            #end

            $!{beanName}List.add($!{beanName}DO);
        }
        try{
            this.saveBatch($!{beanName}List, $!{beanName}List.size());
        }catch(Exception e){
            logger.error("批量插入失败；message="+e.getMessage());
            throw new Exception("批量插入失败");
        }
    }

    /**
    * 批量更新记录
    *
    * @param list
    * @return
    */
    @Override
    public void updateBatch(List<$!{entity}DTO> list)throws Exception{
        if (CollectionUtils.isEmpty(list)) {
            logger.error("传对象为空,本次批量更新操作无效!");
            return;
        }
        List<$!{entity}DO> $!{beanName}List = new ArrayList<>();
        for ($!{entity}DTO $!{beanName}DTO : list) {
            $!{entity}DO $!{beanName}DO = new $!{entity}DO();
            #foreach($column in $columns)
                #if("gmt_create"==$!{column.colName} || "create_user"==$!{column.colName} || "status"==$!{column.colName})
                #elseif("gmt_modified"==$!{column.colName} && "java.lang.Long"==$!{column.javaType})
                    $!{beanName}DO.set$!{column.methodName}(System.currentTimeMillis());
                #elseif("gmt_modified"==$!{column.colName} && "java.util.Date"==$!{column.javaType})
                    $!{beanName}DO.set$!{column.methodName}(new Date());
                #elseif("last_user"==$!{column.colName})
                    $!{beanName}DO.set$!{column.methodName}(StringUtils.isEmpty($!{beanName}DO.get$!{column.methodName}()) ? "system" : $!{beanName}DO.get$!{column.methodName}());
                #else$!{beanName}DO.set$!{column.methodName}($!{beanName}DTO.get$!{column.methodName}());
                #end
            #end

            $!{beanName}List.add($!{beanName}DO);
        }
        try{
            this.updateBatchById($!{beanName}List, $!{beanName}List.size());
        }catch(Exception e){
            logger.error("批量更新失败；message="+e.getMessage());
            throw new Exception("批量更新失败");
        }
    }


    /**
    * 批量新增/更新记录
    *
    * @param insertList
    * @param updateList
    * @return
    */
    @Override
    @Transactional(propagation = Propagation.REQUIRED, isolation = Isolation.DEFAULT, timeout = 3600, rollbackFor = Exception.class)
    public void insertAndUpdate(List<$!{entity}DTO> insertList, List<$!{entity}DTO> updateList)throws Exception{
        if(CollectionUtils.isNotEmpty(updateList)) {
            this.updateBatch(updateList);
        }
        if(CollectionUtils.isNotEmpty(insertList)) {
            this.insertBatch(insertList);
        }
    }
}
