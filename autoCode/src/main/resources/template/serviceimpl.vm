#set($packagePath = $!context.packagePath)
#set($entity = $!context.entity)
#set($beanName = $!context.beanName)
#set($columns = $!context.columns)
#set($tableName = $!context.tableName)
#set($colKey = $!context.colKey)
#set($type = $!context.type)
#set($rootPackage = $!context.rootPackage)
package $!packagePath;

import $!{rootPackage}.biz.dataobject.*;
import $!{rootPackage}.biz.service.$!{entity}Service;
import $!{rootPackage}.client.dto.*;
import $!{rootPackage}.biz.mapper.*;
import com.kaka.common.utils.LogUtil;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.Objects;
#set($isStatus = "false")
#foreach($column in $columns)
    #if($!column.attrName=="status")
        #set($isStatus ="true")
    #end
#end
#set($isLastUser = "false")
#foreach($column in $columns)
    #if($!column.attrName=="lastUser")
        #set($isLastUser ="true")
    #end
#end
#if($!isStatus=="true")
import com.kaka.common.enums.KakaStatus;
#end

import org.springframework.transaction.annotation.Isolation;
import org.springframework.transaction.annotation.Propagation;
import org.springframework.transaction.annotation.Transactional;

/**
* @Description： $!context.desc
* @PackageName: $!packagePath
* @ClassName: $!{entity}${type}
* @project： $!context.sysCode
* @author: springyu 一只很土的狼  pingchunyu@kaka.com.cn
* @dep: 云端技术部
* @company: 浙江亿咖通科技有限公司  Zhejiang e-CarX Technology Co., Ltd
* @address: 浙江省杭州市滨江区泰安路杭州印B座17楼(华联·星光大道2期西)
* @date： $!context.date
*/
@Service
public class $!{entity}$!{type} implements $!{entity}Service {
    private  final LogUtil logger = new LogUtil(this.getClass());
    @Autowired
    private $!{entity}Mapper $!{beanName}Mapper;

    /**
     * 根据主键查询信息
     * @param $!{colKey.attrName}
     * @return
     */
    @Override
    public $!{entity}DTO selectOne($!{colKey.javaType} $!{colKey.attrName}) {
        if(null == $!{colKey.attrName}){
            logger.error("传入参数为空！");
            return null;
        }
        $!{entity}DO $!{beanName}DO = $!{beanName}Mapper.selectOne($!{colKey.attrName});
        if(null == $!{beanName}DO){
         logger.error("查询结果为空！$!{colKey.attrName}="+$!{colKey.attrName});
         return null;
        }
        $!{entity}DTO $!{beanName}DTO = new $!{entity}DTO();
        #foreach($column in $columns)
            $!{beanName}DTO.set$!{column.methodName}($!{beanName}DO.get$!{column.methodName}());
        #end
        return $!{beanName}DTO;
    }

    /**
     * 根据传入参数查询列表 支持分页查询
     * @param param
     * @return
     */
    @Override
    public List<$!{entity}DTO> selectList(Map<String, Object> param) {
        //#{offset},#{limit}
        if(null == param || param.isEmpty()){
            return null;
        }
        if(!(param.containsKey("offset")&&param.containsKey("limit"))){
            param.put("offset",0);
            param.put("limit",500);
        }
        List<$!{entity}DTO> valueList = new ArrayList<$!{entity}DTO>();
        List<$!{entity}DO> dataList = $!{beanName}Mapper.selectList(param);
        if(null == dataList || dataList.isEmpty()){
             logger.error("查询结果为空！param="+param);
            return null;
        }
        for(int i=0;i<dataList.size();i++){
            $!{entity}DO $!{beanName}DO = dataList.get(i);
            $!{entity}DTO $!{beanName}DTO = new $!{entity}DTO();
            #foreach($column in $columns)
                $!{beanName}DTO.set$!{column.methodName}($!{beanName}DO.get$!{column.methodName}());
            #end
            valueList.add($!{beanName}DTO);
        }
        return valueList;
    }

    /**
     * 根据条件查询记录总条数
     * @param param
     * @return
     */
    @Override
    public Integer countList(Map<String, Object> param) {
        if(null == param || param.isEmpty()){
            return -1;
        }
        return $!{beanName}Mapper.countList(param);
    }

    /**
     * 新增一条记录
     * @param $!{beanName}DTO
     * @return
     */
    @Override
    public int insert($!{entity}DTO $!{beanName}DTO) {
        if(null == $!{beanName}DTO){
             logger.error("查询对象为空！");
             return -1;
        }
        $!{entity}DO $!{beanName}DO = new $!{entity}DO();
        #foreach($column in $columns)
            $!{beanName}DO.set$!{column.methodName}($!{beanName}DTO.get$!{column.methodName}());
        #end
        int insert= $!{beanName}Mapper.insert($!{beanName}DO);
        if(insert>0){
        $!{beanName}DTO.set$!{colKey.methodName}($!{beanName}DO.get$!{colKey.methodName}());
        }
        return insert;
    }

    /**
     * 修改一条记录
     * @param $!{beanName}DTO
     * @return
     */
    @Override
    public int update($!{entity}DTO $!{beanName}DTO) {
        if(null == $!{beanName}DTO){
         logger.error("查询对象为空！");
         return -1;
        }
        $!{entity}DO $!{beanName}DO = new $!{entity}DO();
        #foreach($column in $columns)
            $!{beanName}DO.set$!{column.methodName}($!{beanName}DTO.get$!{column.methodName}());
        #end
        return $!{beanName}Mapper.update($!{beanName}DO);
    }

    /**
     * 删除一条记录
     * @param $!{colKey.attrName}
     * @return
     */
    @Override
    public int delete($!{colKey.javaType} $!{colKey.attrName}) {
        return $!{beanName}Mapper.delete($!{colKey.attrName});
    }
    #set($isStatus = "false")
     #foreach($column in $columns)
       #if($!column.attrName=="status")
      #set($isStatus ="true")
       #end
     #end
    #set($isLastUser = "false")
    #foreach($column in $columns)
        #if($!column.attrName=="lastUser")
            #set($isLastUser ="true")
        #end
    #end
 #if($!isStatus=="true")
       /**
         * 禁用数据
         * @param $!{colKey.attrName}
        #if($!{isLastUser}=="true")
         * @param userId 操作人
         #end
         * @return
         */
        @Override
        public int disable($!{colKey.javaType} $!{colKey.attrName}#if($!{isLastUser}=="true"),String userId #end){
            $!{entity}DO $!{beanName}DO = new $!{entity}DO();
     $!{beanName}DO.set$!{colKey.methodName}($!{colKey.attrName});

            #if($!{isLastUser}=="true")$!{beanName}DO.setLastUser(userId); #end
            $!{beanName}DO.setStatus(KakaStatus.STATUS_N.getCode());
            return $!{beanName}Mapper.updateStatus($!{beanName}DO);
        }
        /**
         * 启用数据
         * @param $!{colKey.attrName}
        #if($!{isLastUser}=="true")
         * @param userId 操作人
         #end
         * @return
         */
        @Override
        public int enable($!{colKey.javaType} $!{colKey.attrName}#if($!{isLastUser}=="true"),String userId #end){
            $!{entity}DO $!{beanName}DO = new $!{entity}DO();
            $!{beanName}DO.set$!{colKey.methodName}($!{colKey.attrName});

            #if($!{isLastUser}=="true")$!{beanName}DO.setLastUser(userId); #end
            $!{beanName}DO.setStatus(KakaStatus.STATUS_Y.getCode());
            return $!{beanName}Mapper.updateStatus($!{beanName}DO);
        }
        #end

        /**
        * 批量新增记录
        *
        * @param list
        * @return
        */
        @Override
        public void insertBatch(List<$!{entity}DTO> list)throws Exception{
            if (Objects.isNull(list)) {
                logger.error("传对象为空,本次操作无效!");
                return;
            }
            List<$!{entity}DO> $!{beanName}List = new ArrayList<>();
            for ($!{entity}DTO $!{beanName}DTO : list) {
                $!{entity}DO $!{beanName}DO = new $!{entity}DO();
                #foreach($column in $columns)
                    $!{beanName}DO.set$!{column.methodName}($!{beanName}DTO.get$!{column.methodName}());
                #end
                $!{beanName}List.add($!{beanName}DO);
            }
            try{
                $!{beanName}Mapper.insertBatch($!{beanName}List);
            }catch(Exception e){
                logger.error("批量插入失败；message="+e.getMessage());
                throw new Exception("批量插入失败");
            }
        }

        /**
        * 批量新增/更新记录
        *
        * @param insertList
        * @param updateList
        * @return
        */
        @Override
        @Transactional(propagation = Propagation.REQUIRED, isolation = Isolation.DEFAULT, timeout = 3600, rollbackFor = Exception.class)
        public void insertAndUpdate(List<$!{entity}DTO> insertList, List<$!{entity}DTO> updateList)throws Exception{
            if(Objects.nonNull(updateList)&&!updateList.isEmpty()) {
                this.updateBatch(updateList);
            }
            if(Objects.nonNull(insertList)&&!insertList.isEmpty()) {
                this.insertBatch(insertList);
            }
        }

        /**
        * 批量更新记录
        *
        * @param list
        * @return
        */
        @Override
        public void updateBatch(List<$!{entity}DTO> list)throws Exception{
            if (Objects.isNull(list)) {
            logger.error("传对象为空,本次操作无效!");
            return;
            }
            List<$!{entity}DO> $!{beanName}List = new ArrayList<>();
                for ($!{entity}DTO $!{beanName}DTO : list) {
                $!{entity}DO $!{beanName}DO = new $!{entity}DO();
                #foreach($column in $columns)
                    $!{beanName}DO.set$!{column.methodName}($!{beanName}DTO.get$!{column.methodName}());
                #end
                $!{beanName}List.add($!{beanName}DO);
                }
                try{
                $!{beanName}Mapper.updateBatch($!{beanName}List);
                }catch(Exception e){
                logger.error("批量更新失败；message="+e.getMessage());
                throw new Exception("批量更新失败");
            }
        }
}
