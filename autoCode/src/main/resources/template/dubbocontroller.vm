#set($packagePath = $!context.packagePath)
#set($entity = $!context.entity)
#set($beanName = $!context.beanName)
#set($columns = $!context.columns)
#set($tableName = $!context.tableName)
#set($colKey = $!context.colKey)
#set($type = $!context.type)
#set($rootPackage = $!context.rootPackage)
#set($consumerRootPackage = $!context.consumerRootPackage)
#set($sysCode = $!context.consumerSysCode)
#set($consumerUriPrefix = $!context.consumerUriPrefix)
package $!{consumerRootPackage}.#if(!$!{context.codeStatus})boot.#{end}controller;

import $!{consumerRootPackage}.config.#if(!$!{context.codeStatus})properties.AppProperties;#{else}AppConfig;
#{end}
import $!{consumerRootPackage}.call.#if(!$!{context.codeStatus})service.#{end}$!{entity}CallService;
import $!{consumerRootPackage}.#if(!$!{context.codeStatus})biz.#{end}service.token.KakaTokenService;
import com.kaka.common.utils.exception.KakaException;
import com.kaka.common.base.BaseResult;
import com.kaka.common.utils.*;
import com.kaka.common.enums.*;
import com.kaka.common.base.*;
import com.kaka.common.constants.*;
import $!{rootPackage}.#if(!$!{context.codeStatus})client.#{end}dto.*;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.util.CollectionUtils;
import org.springframework.web.bind.annotation.*;
import javax.servlet.http.HttpServletRequest;
import org.apache.commons.lang3.StringUtils;

import java.util.*;

/**
* @apiDefine $!{tableName} $!context.desc
* @Description： $!context.desc
* @PackageName: $!packagePath
* @ClassName: $!{entity}Controller
* @project： $!{sysCode}
* @author: jsk
* @dep: 99技术部
* @company: 99技术有限公司
* @address: 国际大路,中原谷
* @date： $!context.date
*/
@RestController
public class $!{entity}Controller {
    private final LogUtil logger = new LogUtil(this.getClass());

    @Autowired
    private $!{entity}CallService $!{beanName}CallService;
    @Autowired
    private KakaTokenService kakaTokenService;

    @Autowired
    private #if(!$!{context.codeStatus})AppProperties#{else}AppConfig#{end} appConfig;

    /**
    * @apiIgnore Not finished Method
    * @api {get} #if($!{consumerUriPrefix})/$!{consumerUriPrefix}#end/$!{tableName}/{$!{colKey.attrName}} 根据$!{colKey.attrName}查找信息
    * @apiVersion 1.0.0
    * @apiName #if($!{consumerUriPrefix})/$!{consumerUriPrefix}#end/$!{tableName}/{$!{colKey.attrName}}
    * @apiGroup $!{tableName}
    * @apiHeader {String} AUTHORIZATION 认证用的的令牌
    #foreach($column in $columns)
    * @apiSuccess (200) {$!column.javaType} #if($!column.notNull=="false") [$!column.attrName] #else  $!column.attrName   #end $!column.colDesc
    #end
    * @apiError (400) {String} RequestParamsError 请求中的参数不符合要求
    * @apiError (500) {String} ServiceInternalError 服务器内部错误
    */
    @GetMapping(value="#if($!{consumerUriPrefix})/$!{consumerUriPrefix}#end/$!{tableName}/{$!{colKey.attrName}}")
    public ResponseEntity<?>  selectOne(HttpServletRequest request,@PathVariable $!colKey.javaType $!{colKey.attrName}) throws KakaException {
        if(Objects.isNull($!{colKey.attrName})){
            logger.info("传入主键为空!");
            throw new KakaException(ResultCode.FAILURE.getCode(),HttpStatus.BAD_REQUEST, "传入主键为空!");
        }
        BaseResult<$!{entity}DTO> baseResult = $!{beanName}CallService.selectOne($!{colKey.attrName});
        if(Constants.RESPONSE_FORMAT_UNREST.equals((HttpUtil.getResponseformat(request)))) {
            return new ResponseEntity(baseResult, HttpStatus.OK);
        }
        return  new ResponseEntity(baseResult.getData(), HttpStatus.OK);
    }

    /**
    * @apiIgnore Not finished Method
    * @api {post} #if($!{consumerUriPrefix})/$!{consumerUriPrefix}#end/$!{tableName}s 根据传入条件查询list列表
    * @apiVersion 1.0.0
    * @apiName #if($!{consumerUriPrefix})/$!{consumerUriPrefix}#end/$!{tableName}s
    * @apiGroup $!{tableName}
    *
    * @apiHeader {String} AUTHORIZATION 认证用的的令牌
    * @apiParam (Body) {java.lang.Long}   [pageIndex] 当前页码 默认为0
    * @apiParam (Body) {java.lang.Long}   [pageSize]  页大小  默认为20
    #foreach($column in $columns)
        #if($!{column.attrName}=="lastUser"||$!{column.attrName}=="gmtCreate"||$!{column.attrName}=="gmtModified")
        #else
            * @apiParam (Body) {$!column.javaType}  [$!{column.attrName}]  $!column.colDesc
        #end
    #end
    * @apiSuccess (200) {java.lang.Long}   pageSize  页大小
    * @apiSuccess (200) {java.lang.Long}   pageIndex  当前页码
    * @apiSuccess (200) {java.lang.Long}   totalPageCount  总页数
    * @apiSuccess (200) {java.lang.Long}   record  记录总数
    * @apiSuccess (200) {Object[]}   data 列表数据
    #foreach($column in $columns)
        * @apiSuccess (200) {$!column.javaType} #if($!column.notNull=="false") [data.$!column.attrName] #else  data.$!column.attrName   #end $!column.colDesc
    #end
    * @apiError (400) {String} RequestParamsError 请求中的参数不符合要求
    * @apiError (500) {String} ServiceInternalError 服务器内部错误
    */
    @PostMapping(value="#if($!{consumerUriPrefix})/$!{consumerUriPrefix}#end/$!{tableName}s")
    public ResponseEntity<?> selectList(HttpServletRequest request, @RequestBody Map<String,Object> param) throws KakaException {
        logger.info("根据传入参数查询$!{tableName}列表数据,param:" + param);
        PageResult<List<$!{entity}DTO>> pageResult = $!{beanName}CallService.selectList(param);
        if(Constants.RESPONSE_FORMAT_UNREST.equals((HttpUtil.getResponseformat(request)))) {
            return new ResponseEntity(pageResult, HttpStatus.OK);
        }
        return  new ResponseEntity(pageResult.getData(), HttpStatus.OK);
    }

    /**
    * @apiIgnore Not finished Method
    * @api {post} #if($!{consumerUriPrefix})/$!{consumerUriPrefix}#end/$!{tableName}s/count 根据传入条件查询记录总数
    * @apiVersion 1.0.0
    * @apiName #if($!{consumerUriPrefix})/$!{consumerUriPrefix}#end/$!{tableName}s/count
    * @apiGroup $!{tableName}
    *
    * @apiHeader {String} AUTHORIZATION 认证用的的令牌
    #foreach($column in $columns)
        #if($!{column.attrName}=="lastUser"||$!{column.attrName}=="gmtCreate"||$!{column.attrName}=="gmtModified")
        #else
            * @apiParam (Body) {$!column.javaType}  [$!{column.attrName}]  $!column.colDesc
        #end
    #end
    * @apiSuccess (200) {java.lang.Long} 记录总数
    * @apiError (400) {String} RequestParamsError 请求中的参数不符合要求
    * @apiError (500) {String} ServiceInternalError 服务器内部错误
    */
    @PostMapping(value="#if($!{consumerUriPrefix})/$!{consumerUriPrefix}#end/$!{tableName}s/count")
    public ResponseEntity<?> countList(HttpServletRequest request, @RequestBody Map<String,Object> param){
        logger.info("根据传入参数查询$!{tableName}数据总数,param:" + param);
        BaseResult<Integer> baseResult = $!{beanName}CallService.countList(Optional.ofNullable(param).orElseGet(HashMap::new));
        if(Constants.RESPONSE_FORMAT_UNREST.equals((HttpUtil.getResponseformat(request)))) {
            return new ResponseEntity(baseResult, HttpStatus.OK);
        }
        return  new ResponseEntity(baseResult.getData(), HttpStatus.OK);
    }

    /**
    * @apiIgnore Not finished Method
    * @api {post} #if($!{consumerUriPrefix})/$!{consumerUriPrefix}#end/$!{tableName} 新增数据
    * @apiVersion 1.0.0
    * @apiName #if($!{consumerUriPrefix})/$!{consumerUriPrefix}#end/$!{tableName}/insert
    * @apiGroup $!{tableName}
    *
    * @apiHeader {String} AUTHORIZATION 认证用的的令牌
    #foreach($column in $columns)
        #if($!{column.attrName}=="id"||$!{column.attrName}=="lastUser"||$!{column.attrName}=="gmtCreate"||$!{column.attrName}=="gmtModified")

        #else
            * @apiParam (Body) {$!column.javaType} #if($!column.notNull=="false") [$!column.attrName] #else  $!column.attrName   #end $!column.colDesc
        #end
    #end
    * @apiSuccess (200) {String} data 插入记录条数
    * @apiError (400) {String} RequestParamsError 请求中的参数不符合要求
    * @apiError (500) {String} ServiceInternalError 服务器内部错误
    */
    @PostMapping(value="#if($!{consumerUriPrefix})/$!{consumerUriPrefix}#end/$!{tableName}")
    public ResponseEntity<?>  insert(HttpServletRequest request,@RequestBody $!{entity}DTO $!{beanName}DTO) throws KakaException {
        if(Objects.isNull($!{beanName}DTO)){
            logger.info("传入对象为空!");
            throw new KakaException(ResultCode.FAILURE.getCode(),HttpStatus.BAD_REQUEST, "传入对象为空!");
        }
        if(Objects.nonNull($!{beanName}DTO.get$!{colKey.methodName}())){
            logger.info("新增数据主键必需为空!"+$!{beanName}DTO.toString());
            throw new KakaException(ResultCode.FAILURE.getCode(),HttpStatus.BAD_REQUEST, "新增数据主键必需为空!"+$!{beanName}DTO.toString());
        }
    #foreach($column in $columns)
        #if($!{column.attrName}=="lastUser" || $!{column.attrName}=="createUser")
        $!{beanName}DTO.set$!{column.methodName}(this.getLoginUserName(request));
        #end
    #end
        BaseResult<Integer> baseResult = $!{beanName}CallService.insert($!{beanName}DTO);
        if(Constants.RESPONSE_FORMAT_UNREST.equals((HttpUtil.getResponseformat(request)))) {
            return new ResponseEntity(baseResult, HttpStatus.OK);
        }
        return  new ResponseEntity(baseResult.getData(), HttpStatus.OK);
    }


    /**
    * @apiIgnore Not finished Method
    * @api {put} #if($!{consumerUriPrefix})/$!{consumerUriPrefix}#end/$!{tableName} 更新指定$!{colKey.attrName}信息
    * @apiVersion 1.0.0
    * @apiName #if($!{consumerUriPrefix})/$!{consumerUriPrefix}#end/$!{tableName}/update
    * @apiGroup $!{tableName}
    *
    * @apiHeader {String} AUTHORIZATION 认证用的的令牌
    #foreach($column in $columns)
        #if($!{column.attrName}=="lastUser"
            || $!{column.attrName}=="createUser"
            ||$!{column.attrName}=="gmtCreate"
            ||$!{column.attrName}=="gmtModified"
            ||$!{column.attrName}=="status")#else
            * @apiParam (Body) {$!column.javaType} #if($!column.notNull=="false") [$!column.attrName] #else  $!column.attrName   #end $!column.colDesc
        #end
    #end
    * @apiSuccess (200) {String} data 更新记录条数
    * @apiError (400) {String} RequestParamsError 请求中的参数不符合要求
    * @apiError (500) {String} ServiceInternalError 服务器内部错误
    */
    @PutMapping(value="#if($!{consumerUriPrefix})/$!{consumerUriPrefix}#end/$!{tableName}")
    public ResponseEntity<?>  update(HttpServletRequest request,@RequestBody $!{entity}DTO $!{beanName}DTO) throws KakaException {
        if(Objects.isNull($!{beanName}DTO)){
            logger.info("传入对象为空!");
            throw new KakaException(ResultCode.FAILURE.getCode(),HttpStatus.BAD_REQUEST, "传入对象为空!");
        }
        if(Objects.isNull($!{beanName}DTO.get$!{colKey.methodName}())){
            logger.info("更新操作主键不能为空!" + $!{beanName}DTO.toString());
            throw new KakaException(ResultCode.FAILURE.getCode(),HttpStatus.BAD_REQUEST, "更新操作主键不能为空!" + $!{beanName}DTO.toString());
        }
        #foreach($column in $columns)
            #if($!{column.attrName}=="lastUser" || $!{column.attrName}=="createUser")
                $!{beanName}DTO.set$!{column.methodName}(this.getLoginUserName(request));
            #end
        #end
        BaseResult<Integer> baseResult = $!{beanName}CallService.update($!{beanName}DTO);
        if(Constants.RESPONSE_FORMAT_UNREST.equals((HttpUtil.getResponseformat(request)))) {
            return new ResponseEntity(baseResult, HttpStatus.OK);
        }
        return  new ResponseEntity(baseResult.getData(), HttpStatus.OK);
    }



    #set($isStatus = "false")
    #set($isLastUser = "false")
    #foreach($column in $columns)
        #if($!column.attrName=="status")
            #set($isStatus ="true")
        #elseif($!column.attrName=="lastUser")
            #set($isLastUser ="true")
        #end
    #end

    #if($!isStatus=="true")
    /**
    * @apiIgnore Not finished Method
    * @api {put} #if($!{consumerUriPrefix})/$!{consumerUriPrefix}#end/$!{tableName}/enable/{$!{colKey.attrName}} 生效数据
    * @apiVersion 1.0.0
    * @apiName #if($!{consumerUriPrefix})/$!{consumerUriPrefix}#end/$!{tableName}/enable/{$!{colKey.attrName}}
    * @apiGroup $!{tableName}
    *
    * @apiHeader {String} AUTHORIZATION 认证用的的令牌
    * @apiSuccess (200) {String} data 修改记录条数
    * @apiError (400) {String} RequestParamsError 请求中的参数不符合要求
    * @apiError (500) {String} ServiceInternalError 服务器内部错误
    */
    @PutMapping(value="#if($!{consumerUriPrefix})/$!{consumerUriPrefix}#end/$!{tableName}/enable/{$!{colKey.attrName}}")
    public ResponseEntity<?>  enable(HttpServletRequest request, @PathVariable $!colKey.javaType $!{colKey.attrName}) throws KakaException {
        if(Objects.isNull($!{colKey.attrName})){
            logger.info("传入主键为空!");
            throw new KakaException(ResultCode.FAILURE.getCode(),HttpStatus.BAD_REQUEST, "传入主键为空!");
        }
        BaseResult<Integer> baseResult = $!{beanName}CallService.enable($!{colKey.attrName}#if($!{isLastUser}=="true"), this.getLoginUserName(request)#end);
        if(Constants.RESPONSE_FORMAT_UNREST.equals((HttpUtil.getResponseformat(request)))) {
            return new ResponseEntity(baseResult, HttpStatus.OK);
        }
        return  new ResponseEntity(baseResult.getData(), HttpStatus.OK);
    }

    /**
    * @apiIgnore Not finished Method
    * @api {put} #if($!{consumerUriPrefix})/$!{consumerUriPrefix}#end/$!{tableName}/disable/{$!{colKey.attrName}} 禁用数据
    * @apiVersion 1.0.0
    * @apiName #if($!{consumerUriPrefix})/$!{consumerUriPrefix}#end/$!{tableName}/disable/{$!{colKey.attrName}}
    * @apiGroup $!{tableName}
    *
    * @apiHeader {String} AUTHORIZATION 认证用的的令牌
    * @apiSuccess (200) {String} data 修改记录条数
    * @apiError (400) {String} RequestParamsError 请求中的参数不符合要求
    * @apiError (500) {String} ServiceInternalError 服务器内部错误
    */
    @PutMapping(value="#if($!{consumerUriPrefix})/$!{consumerUriPrefix}#end/$!{tableName}/disable/{$!{colKey.attrName}}")
    public ResponseEntity<?>  disable(HttpServletRequest request, @PathVariable $!colKey.javaType $!{colKey.attrName}) throws KakaException {
        if(null == $!{colKey.attrName}){
            logger.info("传入主键为空!");
            throw new KakaException(ResultCode.FAILURE.getCode(),HttpStatus.BAD_REQUEST, "传入主键为空!");
        }
        BaseResult<Integer> baseResult = $!{beanName}CallService.disable($!{colKey.attrName}#if($!{isLastUser}=="true"), this.getLoginUserName(request)#end);
        if(Constants.RESPONSE_FORMAT_UNREST.equals((HttpUtil.getResponseformat(request)))) {
            return new ResponseEntity(baseResult, HttpStatus.OK);
        }
        return  new ResponseEntity(baseResult.getData(), HttpStatus.OK);
    }
#end

    /**
    * 获取登入用户信息
    * @param request
    * @return
    * @throws KakaException
    */
    private String getLoginUserName(HttpServletRequest request) throws KakaException {
        String authToken = request.getHeader(appConfig.getTokenHeader());
        if (StringUtils.isNotBlank(authToken)) {
            return kakaTokenService.getUsernameFromToken(authToken);
        }
        throw new KakaException(ResultCode.FAILURE.getCode(), HttpStatus.BAD_REQUEST, "传入对象为空!通过authToken获取用户id失败!");
    }
}
